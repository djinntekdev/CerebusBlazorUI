@page "/Login"
@using CerebusBlazorUI.Classes.Login
@using CerebusBlazorUI.Utilities
@using CerebusBlazorUI.Utilities.Entity
@using CerebusBlazorUI.Classes.User;
@inject IDialogService DialogService
@inject CerebusContext context



<h3>Login</h3>

<div>
    <FluentGrid Spacing="1"  AdaptiveRendering="false" Justify="JustifyContent.Center">
        <FluentGridItem lg="3" >
            &nbsp;
        </FluentGridItem>
        <FluentGridItem lg="6"  >
            <div class="card">
                <FluentLabel> Username: </FluentLabel>
                <FluentTextField Value="@credentials.Username"  ValueChanged="@((string newValue) => OnUsernameChanged(newValue))" Maxlength="25" Autofocus="true" Required="true" >
                    <FluentIcon Value="@(new Icons.Regular.Size16.Key())" Slot="start" Color="Color.Neutral" />
                </FluentTextField>
                <FluentLabel> Password: </FluentLabel>
                <FluentTextField Value="@credentials.Password" ValueChanged="@((string newValue) => OnPasswordChanged(newValue))" Maxlength="16" TextFieldType="TextFieldType.Password" Required="true">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Key())" Slot="start" Color="Color.Neutral" />
                </FluentTextField>
                <FluentLabel Typo="Typography.H5" Style="color:red;"></FluentLabel>
                <hr />
                <FluentButton Appearance="Appearance.Accent" OnClick="@StartLogin" Disabled=@buttonsDisabled>Login</FluentButton> <FluentButton Disabled=@buttonsDisabled>Clear</FluentButton>

            </div>
        </FluentGridItem>
        <FluentGridItem lg="3">
            &nbsp;
        </FluentGridItem>
    </FluentGrid>

</div>

@code {
    LoginCredentials credentials = new LoginCredentials();
    bool buttonsDisabled = true; 
    string loginMessage = "Error!";
    // Style="border-style: solid; border-color: red;"

     

    void OnUsernameChanged(string newValue)
    {
        if (newValue != null && !string.IsNullOrWhiteSpace(newValue))
        {
            if (newValue.Length > 0)
            {
                buttonsDisabled = false;
                credentials.Username = newValue;
            }
            else
            {
                buttonsDisabled = true;
                credentials.Username = string.Empty;
            }
        }
        else
        {
            buttonsDisabled = true;
            credentials.Username = string.Empty;
        }

        StateHasChanged();
    }

void OnPasswordChanged(string newValue)
    {
        if (newValue != null && !string.IsNullOrWhiteSpace(newValue))
        {
            if (newValue.Length > 0)
            {
                buttonsDisabled = false;
                credentials.Password = newValue;
            }
            else
            {
                buttonsDisabled = true;
                credentials.Password = string.Empty;
            }
        }
        else
        {
            buttonsDisabled = true;
            credentials.Password = string.Empty;
        }

        StateHasChanged();
        // Perform some other actions 
    }

    private async Task StartLogin() 
    {
        //string credentials.U = "robert.reed";
        LoginResult result = new LoginResult();
        IDialogReference? dialog;
        DialogResult? messageBoxResult;
 
#line default

        try
        {

            string password = Encryptor.HashPasswordV2(credentials.Password.Trim());

            User user = context.Users
                .Where(u => u.Username == credentials.Username.Trim() 
                    && u.Password == password 
                    && u.IsActive)
                .SingleOrDefault();
            
            if (user is null)
            {
                //Raise error, user not found.
                return;
            }
            
            @* if (string.IsNullOrWhiteSpace(credentials.Username) || string.IsNullOrWhiteSpace(credentials.Password))
            {
                dialog = await DialogService.ShowErrorAsync("Access Denied: Bad Logon Credentials!");
                messageBoxResult = await dialog.Result;
                canceled = messageBoxResult.Cancelled;
            } *@


            result.Message = string.Empty;

            @* if (credentials.Username.Equals(username) && credentials.Password.Equals(password))
            {
                result.Success = true;
                result.ErrorOccurred = false;
                result.StatusCode = 200;
                result.BadPassWord = false;
                result.BadUserName = false;
                dialog = await DialogService.ShowSuccessAsync("Login Successful!");
                messageBoxResult = await dialog.Result;
                canceled = messageBoxResult.Cancelled;
            }
            else
            {
                result.Success = false;
                result.ErrorOccurred = false;
                result.StatusCode = 401;

                if (string.IsNullOrWhiteSpace(credentials.Username)
                    || !credentials.Password.Equals(username))
                {
                    result.BadUserName = true;
                }

                if (string.IsNullOrWhiteSpace(credentials.Password)
                    || !credentials.Password.Equals(password))
                {
                    result.BadPassWord = true;
                }

                dialog = await DialogService.ShowErrorAsync("Access Denied: Bad Logon Credentials!");
                messageBoxResult = await dialog.Result;
                canceled = messageBoxResult.Cancelled;
            } *@
        }
        catch (Exception ex)
        {
            result.Message = ex.Message;
        }
        finally
        {

        }
    }
}

